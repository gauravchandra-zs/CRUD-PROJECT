// Code generated by MockGen. DO NOT EDIT.
// Source: ./datastore/interface.go

// Package datastore is a generated GoMock package.
package datastore

import (
	models "Projects/GoLang-Interns-2022/threeLayer/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBook is a mock of Book interface.
type MockBook struct {
	ctrl     *gomock.Controller
	recorder *MockBookMockRecorder
}

// MockBookMockRecorder is the mock recorder for MockBook.
type MockBookMockRecorder struct {
	mock *MockBook
}

// NewMockBook creates a new mock instance.
func NewMockBook(ctrl *gomock.Controller) *MockBook {
	mock := &MockBook{ctrl: ctrl}
	mock.recorder = &MockBookMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBook) EXPECT() *MockBookMockRecorder {
	return m.recorder
}

// CheckBook mocks base method.
func (m *MockBook) CheckBook(ctx context.Context, book *models.Book) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckBook", ctx, book)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckBook indicates an expected call of CheckBook.
func (mr *MockBookMockRecorder) CheckBook(ctx, book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBook", reflect.TypeOf((*MockBook)(nil).CheckBook), ctx, book)
}

// CheckBookBid mocks base method.
func (m *MockBook) CheckBookBid(ctx context.Context, id int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckBookBid", ctx, id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckBookBid indicates an expected call of CheckBookBid.
func (mr *MockBookMockRecorder) CheckBookBid(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBookBid", reflect.TypeOf((*MockBook)(nil).CheckBookBid), ctx, id)
}

// DeleteBook mocks base method.
func (m *MockBook) DeleteBook(ctx context.Context, id int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBook", ctx, id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBook indicates an expected call of DeleteBook.
func (mr *MockBookMockRecorder) DeleteBook(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockBook)(nil).DeleteBook), ctx, id)
}

// DeleteBookByAuthorID mocks base method.
func (m *MockBook) DeleteBookByAuthorID(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBookByAuthorID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBookByAuthorID indicates an expected call of DeleteBookByAuthorID.
func (mr *MockBookMockRecorder) DeleteBookByAuthorID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBookByAuthorID", reflect.TypeOf((*MockBook)(nil).DeleteBookByAuthorID), ctx, id)
}

// GetAllBooks mocks base method.
func (m *MockBook) GetAllBooks(ctx context.Context, title string) ([]models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBooks", ctx, title)
	ret0, _ := ret[0].([]models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBooks indicates an expected call of GetAllBooks.
func (mr *MockBookMockRecorder) GetAllBooks(ctx, title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBooks", reflect.TypeOf((*MockBook)(nil).GetAllBooks), ctx, title)
}

// GetAllBooksByTitle mocks base method.
func (m *MockBook) GetAllBooksByTitle(ctx context.Context, title string) ([]models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBooksByTitle", ctx, title)
	ret0, _ := ret[0].([]models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBooksByTitle indicates an expected call of GetAllBooksByTitle.
func (mr *MockBookMockRecorder) GetAllBooksByTitle(ctx, title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBooksByTitle", reflect.TypeOf((*MockBook)(nil).GetAllBooksByTitle), ctx, title)
}

// GetBookByID mocks base method.
func (m *MockBook) GetBookByID(ctx context.Context, id int) (models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookByID", ctx, id)
	ret0, _ := ret[0].(models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookByID indicates an expected call of GetBookByID.
func (mr *MockBookMockRecorder) GetBookByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookByID", reflect.TypeOf((*MockBook)(nil).GetBookByID), ctx, id)
}

// PostBook mocks base method.
func (m *MockBook) PostBook(ctx context.Context, book *models.Book) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostBook", ctx, book)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostBook indicates an expected call of PostBook.
func (mr *MockBookMockRecorder) PostBook(ctx, book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostBook", reflect.TypeOf((*MockBook)(nil).PostBook), ctx, book)
}

// PutBook mocks base method.
func (m *MockBook) PutBook(ctx context.Context, id int, book *models.Book) (models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBook", ctx, id, book)
	ret0, _ := ret[0].(models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutBook indicates an expected call of PutBook.
func (mr *MockBookMockRecorder) PutBook(ctx, id, book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBook", reflect.TypeOf((*MockBook)(nil).PutBook), ctx, id, book)
}

// MockAuthor is a mock of Author interface.
type MockAuthor struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorMockRecorder
}

// MockAuthorMockRecorder is the mock recorder for MockAuthor.
type MockAuthorMockRecorder struct {
	mock *MockAuthor
}

// NewMockAuthor creates a new mock instance.
func NewMockAuthor(ctrl *gomock.Controller) *MockAuthor {
	mock := &MockAuthor{ctrl: ctrl}
	mock.recorder = &MockAuthorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthor) EXPECT() *MockAuthorMockRecorder {
	return m.recorder
}

// CheckAuthor mocks base method.
func (m *MockAuthor) CheckAuthor(ctx context.Context, author models.Author) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAuthor", ctx, author)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckAuthor indicates an expected call of CheckAuthor.
func (mr *MockAuthorMockRecorder) CheckAuthor(ctx, author interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAuthor", reflect.TypeOf((*MockAuthor)(nil).CheckAuthor), ctx, author)
}

// CheckAuthorByID mocks base method.
func (m *MockAuthor) CheckAuthorByID(ctx context.Context, id int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAuthorByID", ctx, id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckAuthorByID indicates an expected call of CheckAuthorByID.
func (mr *MockAuthorMockRecorder) CheckAuthorByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAuthorByID", reflect.TypeOf((*MockAuthor)(nil).CheckAuthorByID), ctx, id)
}

// DeleteAuthor mocks base method.
func (m *MockAuthor) DeleteAuthor(ctx context.Context, id int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthor", ctx, id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAuthor indicates an expected call of DeleteAuthor.
func (mr *MockAuthorMockRecorder) DeleteAuthor(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthor", reflect.TypeOf((*MockAuthor)(nil).DeleteAuthor), ctx, id)
}

// GetAuthorByID mocks base method.
func (m *MockAuthor) GetAuthorByID(ctx context.Context, id int) (models.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorByID", ctx, id)
	ret0, _ := ret[0].(models.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorByID indicates an expected call of GetAuthorByID.
func (mr *MockAuthorMockRecorder) GetAuthorByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorByID", reflect.TypeOf((*MockAuthor)(nil).GetAuthorByID), ctx, id)
}

// PostAuthor mocks base method.
func (m *MockAuthor) PostAuthor(ctx context.Context, author models.Author) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostAuthor", ctx, author)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAuthor indicates an expected call of PostAuthor.
func (mr *MockAuthorMockRecorder) PostAuthor(ctx, author interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAuthor", reflect.TypeOf((*MockAuthor)(nil).PostAuthor), ctx, author)
}

// PutAuthor mocks base method.
func (m *MockAuthor) PutAuthor(ctx context.Context, id int, author models.Author) (models.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAuthor", ctx, id, author)
	ret0, _ := ret[0].(models.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAuthor indicates an expected call of PutAuthor.
func (mr *MockAuthorMockRecorder) PutAuthor(ctx, id, author interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAuthor", reflect.TypeOf((*MockAuthor)(nil).PutAuthor), ctx, id, author)
}
